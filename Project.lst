Microsoft (R) Macro Assembler Version 14.41.34123.0	    11/20/24 21:18:22
RayaneELYASTIL2Q2 - Copy.asm				     Page 1 - 1


				;  - Detailed Assembly Source Code
				; A comprehensive turn-based combat game with sound and UI management

				; Processor and Memory Configuration
				.386                    ; Target 32-bit x86 processor architecture
				.model flat, stdcall    ; Flat memory model with standard calling convention
				.stack 4096             ; Allocate 4 kilobyte stack space

				; External Function Prototypes
				ExitProcess PROTO, dwExitCode:dword
				PlaySoundA PROTO,
				    pszSound:PTR BYTE,      ; Pointer to sound file or memory
				    hmod:DWORD,             ; Module handle
				    fdwSound:DWORD          ; Sound playback control flags

				; Sound Playback Flag Definitions
 = 00000001			SND_ASYNC       = 0001h     ; Play sound asynchronously
 = 00000008			SND_LOOP        = 0008h     ; Continuously loop sound
 = 00020000			SND_FILENAME    = 00020000h ; Sound source is a filename

				; Include Required Libraries
				Include Irvine32.inc        ; Irvine32 library for system interactions
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				Include Macros.inc          ; Custom macro definitions
			      C .NOLIST
			      C .LIST
			      C 
				includelib Winmm.lib        ; Windows multimedia library for sound

				; Game Sound Configuration Section
 00000000			.data
 00000000 41 6D 69 67 61	    soundFile BYTE "Amiga500.wav", 0  ; Background music filename
	   35 30 30 2E 77
	   61 76 00

				    ; Audio Control Variables
 0000000D 00			    isMuted BYTE 0           ; Mute state tracker
 0000000E 50 72 65 73 73	    muteMessage BYTE "Press M to toggle music", 0
	   20 4D 20 74 6F
	   20 74 6F 67 67
	   6C 65 20 6D 75
	   73 69 63 00
 00000026 4D 75 73 69 63	    mutedStatus BYTE "Music: MUTED", 0
	   3A 20 4D 55 54
	   45 44 00
 00000033 4D 75 73 69 63	    unmutedStatus BYTE "Music: PLAYING", 0
	   3A 20 50 4C 41
	   59 49 4E 47 00
				    ; Inside Logo Art
 00000042 20 20 20 5F 5F	    logoArt1 BYTE "   ________", 0
	   5F 5F 5F 5F 5F
	   5F 00
 0000004E 20 20 2F 20 5F	    logoArt2 BYTE "  / __/ __/", 0  
	   5F 2F 20 5F 5F
	   2F 00
 0000005A 20 5F 5C 20 5C	    logoArt3 BYTE " _\ \_\ \  ", 0
	   5F 5C 20 5C 20
	   20 00
 00000066 2F 5F 5F 5F 2F	    logoArt4 BYTE "/___/___/  ", 0
	   5F 5F 5F 2F 20
	   20 00
				    ; Game Title ASCII Art
 00000072 20 20 20 5F 5F	    titleArt1 BYTE "   ______           __             ______      _ __      ", 0
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 20 5F 20 5F
	   5F 20 20 20 20
	   20 20 00
 000000AC 20 20 2F 20 5F	    titleArt2 BYTE "  / __/ /  ___ ____/ /__ _    __  / __/ /_____(_) /_____ ", 0
	   5F 2F 20 2F 20
	   20 5F 5F 5F 20
	   5F 5F 5F 5F 2F
	   20 2F 5F 5F 20
	   5F 20 20 20 20
	   5F 5F 20 20 2F
	   20 5F 5F 2F 20
	   2F 5F 5F 5F 5F
	   5F 28 5F 29 20
	   2F 5F 5F 5F 5F
	   5F 20 00
 000000E6 20 5F 5C 20 5C	    titleArt3 BYTE " _\ \/ _ \/ _ `/ _  / _ \ |/|/ / _\ \/ __/ __/ /  '_/ -_)", 0
	   2F 20 5F 20 5C
	   2F 20 5F 20 60
	   2F 20 5F 20 20
	   2F 20 5F 20 5C
	   20 7C 2F 7C 2F
	   20 2F 20 5F 5C
	   20 5C 2F 20 5F
	   5F 2F 20 5F 5F
	   2F 20 2F 20 20
	   27 5F 2F 20 2D
	   5F 29 00
 00000120 2F 5F 5F 5F 2F	    titleArt4 BYTE "/___/_//_/\_,_/\_,_/\___/__,__/ /___/\__/_/ /_/_/\_\\__/ ", 0
	   5F 2F 2F 5F 2F
	   5C 5F 2C 5F 2F
	   5C 5F 2C 5F 2F
	   5C 5F 5F 5F 2F
	   5F 5F 2C 5F 5F
	   2F 20 2F 5F 5F
	   5F 2F 5C 5F 5F
	   2F 5F 2F 20 2F
	   5F 2F 5F 2F 5C
	   5F 5C 5C 5F 5F
	   2F 20 00
 0000015A 20 20 20 20 20	    titleArt5 BYTE "                                                         ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 00

				    ; Main Menu Options
 00000194			    menuOptions LABEL BYTE
 00000194 31 2E 20 53 74	    menuOption1 BYTE "1. Start Game", 0
	   61 72 74 20 47
	   61 6D 65 00
 000001A2 32 2E 20 49 6E	    menuOption2 BYTE "2. Instructions", 0
	   73 74 72 75 63
	   74 69 6F 6E 73
	   00
 000001B2 33 2E 20 45 78	    menuOption3 BYTE "3. Exit", 0
	   69 74 00
 000001BA 50 72 65 73 73	    pressKeyPrompt BYTE "Press the corresponding number to select an option", 0
	   20 74 68 65 20
	   63 6F 72 72 65
	   73 70 6F 6E 64
	   69 6E 67 20 6E
	   75 6D 62 65 72
	   20 74 6F 20 73
	   65 6C 65 63 74
	   20 61 6E 20 6F
	   70 74 69 6F 6E
	   00
				    ; Animation Variables
 000001ED 00			    borderX BYTE 0          ; Current X position of border animation
 000001EE 00			    borderY BYTE 0          ; Current Y position of border animation
 000001EF 00			    borderDirection BYTE 0   ; 0=right, 1=down, 2=left, 3=up
 000001F0 2A 00			    borderChar BYTE "*", 0   ; Character used for border trail
 000001F2  00000064 [		    lastBorderPos DWORD 100 DUP(0)  ; Array to store last positions (X and Y packed)
	    00000000
	   ]
 00000382 0F			    borderTrailLength BYTE 15        ; Length of the trail
 00000383 00			    trailIndex BYTE 0               ; Current index in the trail array

				    ; Border Boundaries
 = 00000004			    MENU_TOP = 4
 = 00000017			    MENU_BOTTOM = 23
 = 0000000E			    MENU_LEFT = 14
 = 00000041			    MENU_RIGHT = 65
				    ; Game Instructions Text
 00000384 48 6F 77 20 74	    instructionsTitle BYTE "How to Play:", 0
	   6F 20 50 6C 61
	   79 3A 00
 00000391			    instructionTexts LABEL BYTE
 00000391 2D 20 55 73 65	    instruction1 BYTE "- Use X and C to move up and down", 0
	   20 58 20 61 6E
	   64 20 43 20 74
	   6F 20 6D 6F 76
	   65 20 75 70 20
	   61 6E 64 20 64
	   6F 77 6E 00
 000003B3 2D 20 50 72 65	    instruction2 BYTE "- Press E to select an action", 0
	   73 73 20 45 20
	   74 6F 20 73 65
	   6C 65 63 74 20
	   61 6E 20 61 63
	   74 69 6F 6E 00
 000003D1 2D 20 41 74 74	    instruction3 BYTE "- Attack to deal damage to the enemy", 0
	   61 63 6B 20 74
	   6F 20 64 65 61
	   6C 20 64 61 6D
	   61 67 65 20 74
	   6F 20 74 68 65
	   20 65 6E 65 6D
	   79 00
 000003F6 2D 20 47 75 61	    instruction4 BYTE "- Guard to reduce incoming damage", 0
	   72 64 20 74 6F
	   20 72 65 64 75
	   63 65 20 69 6E
	   63 6F 6D 69 6E
	   67 20 64 61 6D
	   61 67 65 00
 00000418 2D 20 48 65 61	    instruction5 BYTE "- Heal to restore health (3 charges)", 0
	   6C 20 74 6F 20
	   72 65 73 74 6F
	   72 65 20 68 65
	   61 6C 74 68 20
	   28 33 20 63 68
	   61 72 67 65 73
	   29 00
 0000043D 50 72 65 73 73	    instruction6 BYTE "Press SPACE to return to menu", 0
	   20 53 50 41 43
	   45 20 74 6F 20
	   72 65 74 75 72
	   6E 20 74 6F 20
	   6D 65 6E 75 00

				    ; End Game Messages
 0000045B 47 61 6D 65 20	    gameOverText BYTE "Game Over!", 0
	   4F 76 65 72 21
	   00
 00000466 56 69 63 74 6F	    victoryText BYTE "Victory!", 0
	   72 79 21 00
 0000046F 50 72 65 73 73	    playAgainText BYTE "Press SPACE to play again or ESC to exit", 0
	   20 53 50 41 43
	   45 20 74 6F 20
	   70 6C 61 79 20
	   61 67 61 69 6E
	   20 6F 72 20 45
	   53 43 20 74 6F
	   20 65 78 69 74
	   00
 00000498 54 68 61 6E 6B	    exitText BYTE "Thanks for playing! Press any key to exit.", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   50 72 65 73 73
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 65 78 69
	   74 2E 00

				    ; UI Border and Separator Elements
 000004C3 23 23 23 23 23	    top    BYTE "#####################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 000004F9 23 20 20 20 20	    sides  BYTE "#                   #                               #", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 23 00
 0000052F 23 23 23 23 23	    ground BYTE "#####################################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 00
 00000565 23 23 23 23 23	    gameGround BYTE "################################", 0
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 23 23 23
	   23 23 00

				    ; Combat Menu Options
 00000586			    combatOptions LABEL BYTE
 00000586 41 74 74 61 63	    option1 BYTE "Attack", 0
	   6B 00
 0000058D 47 75 61 72 64	    option2 BYTE "Guard", 0
	   00
 00000593 48 65 61 6C 00	    option3 BYTE "Heal", 0
 00000598 50 72 65 73 73	    controlsText BYTE "Press X/C to move, E to select, ESC to exit", 0
	   20 58 2F 43 20
	   74 6F 20 6D 6F
	   76 65 2C 20 45
	   20 74 6F 20 73
	   65 6C 65 63 74
	   2C 20 45 53 43
	   20 74 6F 20 65
	   78 69 74 00

				    ; Player and Game State Variables
 000005C4 06			    playerX BYTE 6
 000005C5 11			    playerY BYTE 17
 000005C6 01			    sideY BYTE 1
 000005C7 00			    inputChar BYTE ?

				    ; Game State Management
				    ; 0 = Menu, 1 = Game, 2 = Instructions, 3 = Game Over
 000005C8 00			    gameState BYTE 0

				    ; Player Combat Statistics
 000005C9 64			    playerHealth BYTE 100
 000005CA 14			    playerDamage BYTE 20
 000005CB 00			    playerIsBlocking BYTE 0
 000005CC 03			    playerCanHeal BYTE 3    ; Healing charge count
 000005CD 1E			    healAmount BYTE 30      ; Health restored per heal

				    ; Enemy Combat Statistics
 000005CE 64			    enemyHealth BYTE 100
 000005CF 14			    enemyDamage BYTE 20
 000005D0 00			    enemyIsAttacking BYTE 0

				    ; Health Constraints
 = 00000064			    MAX_HEALTH = 100

				    ; Status Display Strings
 000005D1 50 6C 61 79 65	    healthStatusText BYTE "Player Health: ", 0
	   72 20 48 65 61
	   6C 74 68 3A 20
	   00
 000005E1 45 6E 65 6D 79	    enemyStatusText BYTE "Enemy Health: ", 0
	   20 48 65 61 6C
	   74 68 3A 20 00
 000005F0 42 4C 4F 43 4B	    blockMessage BYTE "BLOCKED!", 0
	   45 44 21 00
 000005F9 4D 49 53 53 45	    missMessage BYTE "MISSED!", 0
	   44 21 00
 00000601 48 65 61 6C 73	    healChargesText BYTE "Heals Left: ", 0
	   20 4C 65 66 74
	   3A 20 00

				    ; UI Tracking Variables
 0000060E 01			    line BYTE 1
 0000060F 01			    selectedOption BYTE 1
 00000610 00			    actionTaken BYTE 0
 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	    call ClrScr
				    INVOKE PlaySoundA, OFFSET soundFile, NULL, SND_ASYNC OR SND_LOOP OR SND_FILENAME
 00000005  68 00020009	   *	    push   +000020009h
 0000000A  6A 00	   *	    push   +000000000h
 0000000C  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: soundFile
 00000011  E8 00000000 E   *	    call   PlaySoundA
				    
 00000016			mainGameLoop:
 00000016  B2 02		    mov dl, 2
 00000018  B6 1E		    mov dh, 30
 0000001A  E8 00000000 E	    call Gotoxy
 0000001F  BA 0000000E R	    mov edx, OFFSET muteMessage
 00000024  E8 00000000 E	    call WriteString
				    
 00000029  B2 28		    mov dl, 40
 0000002B  B6 1E		    mov dh, 30
 0000002D  E8 00000000 E	    call Gotoxy
 00000032  80 3D 0000000D R	    cmp isMuted, 1
	   01
 00000039  74 07		    je showMuted
 0000003B  BA 00000033 R	    mov edx, OFFSET unmutedStatus
 00000040  EB 05		    jmp displayMuteStatus
 00000042			showMuted:
 00000042  BA 00000026 R	    mov edx, OFFSET mutedStatus
 00000047			displayMuteStatus:
 00000047  E8 00000000 E	    call WriteString

 0000004C  A0 000005C8 R	    mov al, gameState
 00000051  3C 00		    cmp al, 0
 00000053  74 0E		    je ProcessMenuState
 00000055  3C 01		    cmp al, 1
 00000057  74 56		    je ProcessGameState
 00000059  3C 02		    cmp al, 2
 0000005B  74 5C		    je ProcessInstructionsState
 0000005D  3C 03		    cmp al, 3
 0000005F  74 62		    je ProcessGameOverState
 00000061  EB 77		    jmp ExitGameProcedure

 00000063			ProcessMenuState:
 00000063  E8 000000C4		    call DrawMenu
 00000068  E8 00000000 E	    call ReadChar
				    
 0000006D  3C 31		    cmp al, '1'
 0000006F  74 18		    je InitializeNewGame
 00000071  3C 32		    cmp al, '2'
 00000073  74 06		    je EnterInstructionsState
 00000075  3C 33		    cmp al, '3'
 00000077  74 61		    je ExitGameProcedure
 00000079  EB 9B		    jmp mainGameLoop

 0000007B			EnterInstructionsState:
 0000007B  C6 05 000005C8 R	    mov gameState, 2
	   02
 00000082  E8 00000000 E	    call ClrScr
 00000087  EB 8D		    jmp mainGameLoop

 00000089			InitializeNewGame:
 00000089  C6 05 000005C8 R	    mov gameState, 1
	   01
 00000090  C6 05 000005C9 R	    mov playerHealth, 100
	   64
 00000097  C6 05 000005CE R	    mov enemyHealth, 100
	   64
 0000009E  C6 05 000005CC R	    mov playerCanHeal, 3
	   03
 000000A5  E8 00000000 E	    call ClrScr
 000000AA  E9 FFFFFF67		    jmp mainGameLoop

 000000AF			ProcessGameState:
 000000AF  E8 0000027A		    call GameLoop
 000000B4  E9 FFFFFF5D		    jmp mainGameLoop

 000000B9			ProcessInstructionsState:
 000000B9  E8 0000011A		    call ShowInstructions
 000000BE  E9 FFFFFF53		    jmp mainGameLoop

 000000C3			ProcessGameOverState:
 000000C3  E8 000006AD		    call DrawGameOver
 000000C8  E8 00000000 E	    call ReadChar
 000000CD  3C 20		    cmp al, 20h
 000000CF  74 B8		    je InitializeNewGame
 000000D1  3C 1B		    cmp al, 1Bh
 000000D3  74 05		    je ExitGameProcedure
 000000D5  E9 FFFFFF3C		    jmp mainGameLoop

 000000DA			ExitGameProcedure:
 000000DA  E8 00000000 E	    call ClrScr
 000000DF  B2 19		    mov dl, 25
 000000E1  B6 0C		    mov dh, 12
 000000E3  E8 00000000 E	    call Gotoxy
 000000E8  BA 00000498 R	    mov edx, OFFSET exitText
 000000ED  E8 00000000 E	    call WriteString
 000000F2  E8 00000000 E	    call ReadChar
				    invoke ExitProcess, 0
 000000F7  6A 00	   *	    push   +000000000h
 000000F9  E8 00000000 E   *	    call   ExitProcess

 000000FE			main ENDP

 000000FE			ToggleMusicMute PROC
 000000FE  80 35 0000000D R	    xor isMuted, 1
	   01
				    
 00000105  80 3D 0000000D R	    cmp isMuted, 1
	   01
 0000010C  74 12		    je MuteBackgroundMusic
				    
				    INVOKE PlaySoundA, OFFSET soundFile, NULL, SND_ASYNC OR SND_LOOP OR SND_FILENAME
 0000010E  68 00020009	   *	    push   +000020009h
 00000113  6A 00	   *	    push   +000000000h
 00000115  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: soundFile
 0000011A  E8 00000000 E   *	    call   PlaySoundA
 0000011F  C3			    ret
				    
 00000120			MuteBackgroundMusic:
				    INVOKE PlaySoundA, NULL, NULL, 0
 00000120  6A 00	   *	    push   +000000000h
 00000122  6A 00	   *	    push   +000000000h
 00000124  6A 00	   *	    push   +000000000h
 00000126  E8 00000000 E   *	    call   PlaySoundA
 0000012B  C3			    ret
 0000012C			ToggleMusicMute ENDP
 0000012C			DrawMenu PROC
 0000012C  B2 0F		    mov dl, 15
 0000012E  B6 05		    mov dh, 5
 00000130  E8 00000000 E	    call Gotoxy
 00000135  BA 00000072 R	    mov edx, OFFSET titleArt1
 0000013A  E8 00000000 E	    call WriteString
				    
 0000013F  B2 0F		    mov dl, 15
 00000141  B6 06		    mov dh, 6
 00000143  E8 00000000 E	    call Gotoxy
 00000148  BA 000000AC R	    mov edx, OFFSET titleArt2
 0000014D  E8 00000000 E	    call WriteString
				    
 00000152  B2 0F		    mov dl, 15
 00000154  B6 07		    mov dh, 7
 00000156  E8 00000000 E	    call Gotoxy
 0000015B  BA 000000E6 R	    mov edx, OFFSET titleArt3
 00000160  E8 00000000 E	    call WriteString
				    
 00000165  B2 0F		    mov dl, 15
 00000167  B6 08		    mov dh, 8
 00000169  E8 00000000 E	    call Gotoxy
 0000016E  BA 00000120 R	    mov edx, OFFSET titleArt4
 00000173  E8 00000000 E	    call WriteString
				    
 00000178  B2 0F		    mov dl, 15
 0000017A  B6 09		    mov dh, 9
 0000017C  E8 00000000 E	    call Gotoxy
 00000181  BA 0000015A R	    mov edx, OFFSET titleArt5
 00000186  E8 00000000 E	    call WriteString

 0000018B  B2 19		    mov dl, 25
 0000018D  B6 0F		    mov dh, 15
 0000018F  E8 00000000 E	    call Gotoxy
 00000194  BA 00000194 R	    mov edx, OFFSET menuOption1
 00000199  E8 00000000 E	    call WriteString

 0000019E  B2 19		    mov dl, 25
 000001A0  B6 11		    mov dh, 17
 000001A2  E8 00000000 E	    call Gotoxy
 000001A7  BA 000001A2 R	    mov edx, OFFSET menuOption2
 000001AC  E8 00000000 E	    call WriteString

 000001B1  B2 19		    mov dl, 25
 000001B3  B6 13		    mov dh, 19
 000001B5  E8 00000000 E	    call Gotoxy
 000001BA  BA 000001B2 R	    mov edx, OFFSET menuOption3
 000001BF  E8 00000000 E	    call WriteString

 000001C4  B2 0F		    mov dl, 15
 000001C6  B6 16		    mov dh, 22
 000001C8  E8 00000000 E	    call Gotoxy
 000001CD  BA 000001BA R	    mov edx, OFFSET pressKeyPrompt
 000001D2  E8 00000000 E	    call WriteString
 000001D7  C3			    ret
 000001D8			DrawMenu ENDP

 000001D8			ShowInstructions PROC
 000001D8  E8 00000000 E	    call ClrScr
				    
 000001DD  B2 19		    mov dl, 25
 000001DF  B6 05		    mov dh, 5
 000001E1  E8 00000000 E	    call Gotoxy
 000001E6  BA 00000384 R	    mov edx, OFFSET instructionsTitle
 000001EB  E8 00000000 E	    call WriteString

 000001F0  B2 14		    mov dl, 20
 000001F2  B6 08		    mov dh, 8
 000001F4  E8 00000000 E	    call Gotoxy
 000001F9  BA 00000391 R	    mov edx, OFFSET instruction1
 000001FE  E8 00000000 E	    call WriteString

 00000203  B2 14		    mov dl, 20
 00000205  B6 0A		    mov dh, 10
 00000207  E8 00000000 E	    call Gotoxy
 0000020C  BA 000003B3 R	    mov edx, OFFSET instruction2
 00000211  E8 00000000 E	    call WriteString

 00000216  B2 14		    mov dl, 20
 00000218  B6 0C		    mov dh, 12
 0000021A  E8 00000000 E	    call Gotoxy
 0000021F  BA 000003D1 R	    mov edx, OFFSET instruction3
 00000224  E8 00000000 E	    call WriteString

 00000229  B2 14		    mov dl, 20
 0000022B  B6 0E		    mov dh, 14
 0000022D  E8 00000000 E	    call Gotoxy
 00000232  BA 000003F6 R	    mov edx, OFFSET instruction4
 00000237  E8 00000000 E	    call WriteString

 0000023C  B2 14		    mov dl, 20
 0000023E  B6 10		    mov dh, 16
 00000240  E8 00000000 E	    call Gotoxy
 00000245  BA 00000418 R	    mov edx, OFFSET instruction5
 0000024A  E8 00000000 E	    call WriteString

 0000024F  B2 14		    mov dl, 20
 00000251  B6 14		    mov dh, 20
 00000253  E8 00000000 E	    call Gotoxy
 00000258  BA 0000043D R	    mov edx, OFFSET instruction6
 0000025D  E8 00000000 E	    call WriteString

 00000262			InstructionWaitLoop:
 00000262  E8 00000000 E	    call ReadChar
 00000267  3C 20		    cmp al, 20h
 00000269  75 F7		    jne InstructionWaitLoop
 0000026B  C6 05 000005C8 R	    mov gameState, 0
	   00
 00000272  E8 00000000 E	    call ClrScr
 00000277  C3			    ret
 00000278			ShowInstructions ENDP

 00000278			DrawUI PROC
 00000278  B2 00		    mov dl, 0
 0000027A  B6 1C		    mov dh, 28
 0000027C  E8 00000000 E	    call Gotoxy
 00000281  BA 0000052F R	    mov edx, OFFSET ground
 00000286  E8 00000000 E	    call WriteString

 0000028B  B2 00		    mov dl, 0
 0000028D  B6 00		    mov dh, 0
 0000028F  E8 00000000 E	    call Gotoxy
 00000294  BA 000004C3 R	    mov edx, OFFSET top
 00000299  E8 00000000 E	    call WriteString

				    

 0000029E  B9 0000001B		    mov ecx, 27
 000002A3  C6 05 0000060E R	    mov line, 1
	   01
 000002AA			DrawSides:
 000002AA  B2 00		    mov dl, 0
 000002AC  8A 35 0000060E R	    mov dh, line
 000002B2  E8 00000000 E	    call Gotoxy
 000002B7  BA 000004F9 R	    mov edx, OFFSET sides
 000002BC  E8 00000000 E	    call WriteString
 000002C1  FE 05 0000060E R	    inc line
 000002C7  E2 E1		    loop DrawSides

 000002C9  E8 000004E3		    call InsideLogo
 000002CE  B2 00		    mov dl, 0
 000002D0  B6 1D		    mov dh, 29
 000002D2  E8 00000000 E	    call Gotoxy
 000002D7  BA 00000598 R	    mov edx, OFFSET controlsText
 000002DC  E8 00000000 E	    call WriteString

 000002E1  B2 15		    mov dl, 21
 000002E3  B6 14		    mov dh, 20
 000002E5  E8 00000000 E	    call Gotoxy
 000002EA  BA 00000565 R	    mov edx, OFFSET gameGround
 000002EF  E8 00000000 E	    call WriteString

 000002F4  B2 07		    mov dl, 7
 000002F6  B6 0F		    mov dh, 15
 000002F8  E8 00000000 E	    call Gotoxy
 000002FD  BA 00000586 R	    mov edx, OFFSET option1
 00000302  E8 00000000 E	    call WriteString

 00000307  B2 07		    mov dl, 7
 00000309  B6 11		    mov dh, 17
 0000030B  E8 00000000 E	    call Gotoxy
 00000310  BA 0000058D R	    mov edx, OFFSET option2
 00000315  E8 00000000 E	    call WriteString

 0000031A  B2 07		    mov dl, 7
 0000031C  B6 13		    mov dh, 19
 0000031E  E8 00000000 E	    call Gotoxy
 00000323  BA 00000593 R	    mov edx, OFFSET option3
 00000328  E8 00000000 E	    call WriteString

 0000032D  C3			    ret
 0000032E			DrawUI ENDP
 0000032E			GameLoop PROC
 0000032E  E8 FFFFFF45		    call DrawUI
 00000333  E8 00000424		    call DrawPlayer

 00000338			GameLoopStart:
 00000338  0F BE 05		    movsx eax, playerHealth
	   000005C9 R
 0000033F  83 F8 00		    cmp eax, 0
 00000342  7E 5F		    jle GameOverState
 00000344  0F BE 05		    movsx eax, enemyHealth
	   000005CE R
 0000034B  83 F8 00		    cmp eax, 0
 0000034E  7E 53		    jle GameOverState

 00000350  E8 00000328		    call UpdateHealthDisplay
 00000355  E8 00000000 E	    call ReadChar
 0000035A  A2 000005C7 R	    mov inputChar, al

 0000035F  80 3D 000005C7 R	    cmp inputChar, 1Bh
	   1B
 00000366  74 2E		    je ReturnToMenu
 00000368  80 3D 000005C7 R	    cmp inputChar, "x"
	   78
 0000036F  74 3A		    je MovePlayerUp
 00000371  80 3D 000005C7 R	    cmp inputChar, "c"
	   63
 00000378  74 56		    je MovePlayerDown
 0000037A  80 3D 000005C7 R	    cmp inputChar, "e"
	   65
 00000381  0F 84 0000009E	    je SelectGameOption
 00000387  80 3D 000005C7 R	    cmp inputChar, "m"
	   6D
 0000038E  0F 84 FFFFFD6A	    je ToggleMusicMute
 00000394  EB A2		    jmp GameLoopStart

 00000396			ReturnToMenu:
 00000396  C6 05 000005C8 R	    mov gameState, 0
	   00
 0000039D  E8 00000000 E	    call ClrScr
 000003A2  C3			    ret

 000003A3			GameOverState:
 000003A3  C6 05 000005C8 R	    mov gameState, 3
	   03
 000003AA  C3			    ret

 000003AB			MovePlayerUp:
 000003AB  E8 00000389		    call UpdatePlayer
 000003B0  80 3D 000005C5 R	    cmp playerY, 15
	   0F
 000003B7  74 3C		    je WrapToBottom
 000003B9  80 2D 000005C5 R	    sub playerY, 2
	   02
 000003C0  FE 0D 0000060F R	    dec selectedOption
 000003C6  E8 00000391		    call DrawPlayer
 000003CB  E9 FFFFFF68		    jmp GameLoopStart

 000003D0			MovePlayerDown:
 000003D0  E8 00000364		    call UpdatePlayer
 000003D5  80 3D 000005C5 R	    cmp playerY, 19
	   13
 000003DC  74 2F		    je WrapToTop
 000003DE  80 05 000005C5 R	    add playerY, 2
	   02
 000003E5  FE 05 0000060F R	    inc selectedOption
 000003EB  E8 0000036C		    call DrawPlayer
 000003F0  E9 FFFFFF43		    jmp GameLoopStart

 000003F5			WrapToBottom:
 000003F5  C6 05 000005C5 R	    mov playerY, 19
	   13
 000003FC  C6 05 0000060F R	    mov selectedOption, 2
	   02
 00000403  E8 00000354		    call DrawPlayer
 00000408  E9 FFFFFF2B		    jmp GameLoopStart

 0000040D			WrapToTop:
 0000040D  C6 05 000005C5 R	    mov playerY, 15
	   0F
 00000414  C6 05 0000060F R	    mov selectedOption, 0
	   00
 0000041B  E8 0000033C		    call DrawPlayer
 00000420  E9 FFFFFF13		    jmp GameLoopStart

 00000425			SelectGameOption:
 00000425  C6 05 00000610 R	    mov actionTaken, 1
	   01
 0000042C  80 3D 0000060F R	    cmp selectedOption, 0
	   00
 00000433  74 1F		    je ExecuteAttack
 00000435  80 3D 0000060F R	    cmp selectedOption, 1
	   01
 0000043C  0F 84 00000093	    je ExecuteGuard
 00000442  80 3D 0000060F R	    cmp selectedOption, 2
	   02
 00000449  0F 84 000000D8	    je ExecuteHeal
 0000044F  E9 FFFFFEE4		    jmp GameLoopStart

 00000454			ExecuteAttack:
 00000454  B2 07		    mov dl, 7
 00000456  B6 0F		    mov dh, 15
 00000458  E8 00000000 E	    call Gotoxy
 0000045D  B8 0000000C		    mov eax, lightRed + (black * 16)
 00000462  E8 00000000 E	    call SetTextColor
 00000467  BA 00000586 R	    mov edx, OFFSET option1
 0000046C  E8 00000000 E	    call WriteString

 00000471  B8 0000000F		    mov eax, 15
 00000476  E8 00000000 E	    call RandomRange
 0000047B  04 05		    add al, 5

 0000047D  0F BE 1D		    movsx ebx, enemyHealth
	   000005CE R
 00000484  2A D8		    sub bl, al
 00000486  80 FB 00		    cmp bl, 0
 00000489  7D 02		    jge StoreEnemyDamage
 0000048B  32 DB		    xor bl, bl

 0000048D			StoreEnemyDamage:
 0000048D  88 1D 000005CE R	    mov enemyHealth, bl
 00000493  B2 16		    mov dl, 22
 00000495  B6 03		    mov dh, 3
 00000497  E8 00000000 E	    call Gotoxy
				    mWrite "Player attacks for "
 00000611		     1		.data		
 00000611 50 6C 61 79 65     1		??0000 BYTE "Player attacks for ",0	
	   72 20 61 74 74
	   61 63 6B 73 20
	   66 6F 72 20 00
 0000049C		     1		.code
 0000049C  52		     1		push	edx
 0000049D  BA 00000611 R     1		mov	edx,OFFSET ??0000
 000004A2  E8 00000000 E     1		call	WriteString
 000004A7  5A		     1		pop	edx
 000004A8  0F B6 C0		    movzx eax, al
 000004AB  E8 00000000 E	    call WriteDec
				    mWrite " damage!"
 00000625		     1		.data		
 00000625 20 64 61 6D 61     1		??0001 BYTE " damage!",0	
	   67 65 21 00
 000004B0		     1		.code
 000004B0  52		     1		push	edx
 000004B1  BA 00000625 R     1		mov	edx,OFFSET ??0001
 000004B6  E8 00000000 E     1		call	WriteString
 000004BB  5A		     1		pop	edx

 000004BC  B8 000003E8		    mov eax, 1000
 000004C1  E8 00000000 E	    call Delay
 000004C6  E8 00000228		    call ResetOptionColors
 000004CB  E8 0000010E		    call EnemyTurn
 000004D0  E9 FFFFFE63		    jmp GameLoopStart

 000004D5			ExecuteGuard:
 000004D5  B2 07		    mov dl, 7
 000004D7  B6 11		    mov dh, 17
 000004D9  E8 00000000 E	    call Gotoxy
 000004DE  B8 00000009		    mov eax, lightBlue + (black * 16)
 000004E3  E8 00000000 E	    call SetTextColor
 000004E8  BA 0000058D R	    mov edx, OFFSET option2
 000004ED  E8 00000000 E	    call WriteString

 000004F2  C6 05 000005CB R	    mov playerIsBlocking, 1
	   01
 000004F9  B2 16		    mov dl, 22
 000004FB  B6 04		    mov dh, 4
 000004FD  E8 00000000 E	    call Gotoxy
				    mWrite "Player is guarding!"
 0000062E		     1		.data		
 0000062E 50 6C 61 79 65     1		??0002 BYTE "Player is guarding!",0	
	   72 20 69 73 20
	   67 75 61 72 64
	   69 6E 67 21 00
 00000502		     1		.code
 00000502  52		     1		push	edx
 00000503  BA 0000062E R     1		mov	edx,OFFSET ??0002
 00000508  E8 00000000 E     1		call	WriteString
 0000050D  5A		     1		pop	edx

 0000050E  B8 000003E8		    mov eax, 1000
 00000513  E8 00000000 E	    call Delay
 00000518  E8 000001D6		    call ResetOptionColors
 0000051D  E8 000000BC		    call EnemyTurn
 00000522  E9 FFFFFE11		    jmp GameLoopStart

 00000527			ExecuteHeal:
 00000527  80 3D 000005CC R	    cmp playerCanHeal, 0
	   00
 0000052E  0F 84 00000086	    je HealFailed

 00000534  B2 16		    mov dl, 22
 00000536  B6 05		    mov dh, 5
 00000538  E8 00000000 E	    call Gotoxy
 0000053D  B8 0000000A		    mov eax, lightGreen + (black * 16)
 00000542  E8 00000000 E	    call SetTextColor
 00000547  BA 00000593 R	    mov edx, OFFSET option3
 0000054C  E8 00000000 E	    call WriteString

 00000551  FE 0D 000005CC R	    dec playerCanHeal
 00000557  0F B6 05		    movzx eax, healAmount
	   000005CD R
 0000055E  0F B6 1D		    movzx ebx, playerHealth
	   000005C9 R
 00000565  02 D8		    add bl, al
 00000567  80 FB 64		    cmp bl, MAX_HEALTH
 0000056A  7E 02		    jle StorePlayerHealth
 0000056C  B3 64		    mov bl, MAX_HEALTH

 0000056E			StorePlayerHealth:
 0000056E  88 1D 000005C9 R	    mov playerHealth, bl
 00000574  B2 1E		    mov dl, 30
 00000576  B6 13		    mov dh, 19
 00000578  E8 00000000 E	    call Gotoxy
				    mWrite "Healed for "
 00000642		     1		.data		
 00000642 48 65 61 6C 65     1		??0003 BYTE "Healed for ",0	
	   64 20 66 6F 72
	   20 00
 0000057D		     1		.code
 0000057D  52		     1		push	edx
 0000057E  BA 00000642 R     1		mov	edx,OFFSET ??0003
 00000583  E8 00000000 E     1		call	WriteString
 00000588  5A		     1		pop	edx
 00000589  0F B6 05		    movzx eax, healAmount
	   000005CD R
 00000590  E8 00000000 E	    call WriteDec
				    mWrite " HP!"
 0000064E		     1		.data		
 0000064E 20 48 50 21 00     1		??0004 BYTE " HP!",0	
 00000595		     1		.code
 00000595  52		     1		push	edx
 00000596  BA 0000064E R     1		mov	edx,OFFSET ??0004
 0000059B  E8 00000000 E     1		call	WriteString
 000005A0  5A		     1		pop	edx

 000005A1  B8 000003E8		    mov eax, 1000
 000005A6  E8 00000000 E	    call Delay
 000005AB  E8 00000143		    call ResetOptionColors
 000005B0  E8 00000029		    call EnemyTurn
 000005B5  E9 FFFFFD7E		    jmp GameLoopStart

 000005BA			HealFailed:
 000005BA  B2 1E		    mov dl, 30
 000005BC  B6 13		    mov dh, 19
 000005BE  E8 00000000 E	    call Gotoxy
				    mWrite "No healing charges left!"
 00000653		     1		.data		
 00000653 4E 6F 20 68 65     1		??0005 BYTE "No healing charges left!",0	
	   61 6C 69 6E 67
	   20 63 68 61 72
	   67 65 73 20 6C
	   65 66 74 21 00
 000005C3		     1		.code
 000005C3  52		     1		push	edx
 000005C4  BA 00000653 R     1		mov	edx,OFFSET ??0005
 000005C9  E8 00000000 E     1		call	WriteString
 000005CE  5A		     1		pop	edx
 000005CF  B8 000003E8		    mov eax, 1000
 000005D4  E8 00000000 E	    call Delay
 000005D9  E9 FFFFFD5A		    jmp GameLoopStart

 000005DE			GameLoop ENDP
 000005DE			EnemyTurn PROC
 000005DE  C6 05 000005CB R	    mov playerIsBlocking, 0
	   00
				    
 000005E5  B8 00000004		    mov eax, 4
 000005EA  E8 00000000 E	    call RandomRange
 000005EF  83 F8 03		    cmp eax, 3
 000005F2  74 6B		    je EnemyMiss
				    
 000005F4  B8 0000000F		    mov eax, 15
 000005F9  E8 00000000 E	    call RandomRange
 000005FE  04 05		    add al, 5
				    
 00000600  80 3D 000005CB R	    cmp playerIsBlocking, 1
	   01
 00000607  74 41		    je EnemyBlocked
				    
 00000609  0F BE 1D		    movsx ebx, playerHealth
	   000005C9 R
 00000610  2A D8		    sub bl, al
 00000612  80 FB 00		    cmp bl, 0
 00000615  7D 02		    jge StorePlayerDamage
 00000617  32 DB		    xor bl, bl

 00000619			StorePlayerDamage:
 00000619  88 1D 000005C9 R	    mov playerHealth, bl
 0000061F  B2 16		    mov dl, 22
 00000621  B6 0E		    mov dh, 14
 00000623  E8 00000000 E	    call Gotoxy
				    mWrite "Enemy attacks for "
 0000066C		     1		.data		
 0000066C 45 6E 65 6D 79     1		??0006 BYTE "Enemy attacks for ",0	
	   20 61 74 74 61
	   63 6B 73 20 66
	   6F 72 20 00
 00000628		     1		.code
 00000628  52		     1		push	edx
 00000629  BA 0000066C R     1		mov	edx,OFFSET ??0006
 0000062E  E8 00000000 E     1		call	WriteString
 00000633  5A		     1		pop	edx
 00000634  0F B6 C0		    movzx eax, al
 00000637  E8 00000000 E	    call WriteDec
				    mWrite " damage!"
 0000067F		     1		.data		
 0000067F 20 64 61 6D 61     1		??0007 BYTE " damage!",0	
	   67 65 21 00
 0000063C		     1		.code
 0000063C  52		     1		push	edx
 0000063D  BA 0000067F R     1		mov	edx,OFFSET ??0007
 00000642  E8 00000000 E     1		call	WriteString
 00000647  5A		     1		pop	edx
 00000648  EB 28		    jmp EnemyTurnEnd

 0000064A			EnemyBlocked:
 0000064A  B2 16		    mov dl, 22
 0000064C  B6 0F		    mov dh, 15
 0000064E  E8 00000000 E	    call Gotoxy
 00000653  BA 000005F0 R	    mov edx, OFFSET blockMessage
 00000658  E8 00000000 E	    call WriteString
 0000065D  EB 13		    jmp EnemyTurnEnd

 0000065F			EnemyMiss:
 0000065F  B2 16		    mov dl, 22
 00000661  B6 10		    mov dh, 16
 00000663  E8 00000000 E	    call Gotoxy
 00000668  BA 000005F9 R	    mov edx, OFFSET missMessage
 0000066D  E8 00000000 E	    call WriteString

 00000672			EnemyTurnEnd:
 00000672  B8 000003E8		    mov eax, 1000
 00000677  E8 00000000 E	    call Delay
 0000067C  C3			    ret
 0000067D			EnemyTurn ENDP

 0000067D			UpdateHealthDisplay PROC
 0000067D  B2 17		    mov dl, 23
 0000067F  B6 16		    mov dh, 22
 00000681  E8 00000000 E	    call Gotoxy
 00000686  BA 000005D1 R	    mov edx, OFFSET healthStatusText
 0000068B  E8 00000000 E	    call WriteString
 00000690  0F B6 05		    movzx eax, playerHealth
	   000005C9 R
 00000697  E8 00000000 E	    call WriteDec
 0000069C  B0 20		    mov al, ' '
 0000069E  E8 00000000 E	    call WriteChar
 000006A3  E8 00000000 E	    call WriteChar

 000006A8  B2 17		    mov dl, 23
 000006AA  B6 17		    mov dh, 23
 000006AC  E8 00000000 E	    call Gotoxy
 000006B1  BA 000005E1 R	    mov edx, OFFSET enemyStatusText
 000006B6  E8 00000000 E	    call WriteString
 000006BB  0F B6 05		    movzx eax, enemyHealth
	   000005CE R
 000006C2  E8 00000000 E	    call WriteDec
 000006C7  B0 20		    mov al, ' '
 000006C9  E8 00000000 E	    call WriteChar
 000006CE  E8 00000000 E	    call WriteChar

 000006D3  B2 17		    mov dl, 23
 000006D5  B6 18		    mov dh, 24
 000006D7  E8 00000000 E	    call Gotoxy
 000006DC  BA 00000601 R	    mov edx, OFFSET healChargesText
 000006E1  E8 00000000 E	    call WriteString
 000006E6  0F B6 05		    movzx eax, playerCanHeal
	   000005CC R
 000006ED  E8 00000000 E	    call WriteDec
 000006F2  C3			    ret
 000006F3			UpdateHealthDisplay ENDP

 000006F3			ResetOptionColors PROC
 000006F3  60			    pushad
 000006F4  B8 0000000F		    mov eax, white + (black * 16)
 000006F9  E8 00000000 E	    call SetTextColor
				    
 000006FE  B2 07		    mov dl, 7
 00000700  B6 0F		    mov dh, 15
 00000702  E8 00000000 E	    call Gotoxy
 00000707  BA 00000586 R	    mov edx, OFFSET option1
 0000070C  E8 00000000 E	    call WriteString
				    
 00000711  B2 07		    mov dl, 7
 00000713  B6 11		    mov dh, 17
 00000715  E8 00000000 E	    call Gotoxy
 0000071A  BA 0000058D R	    mov edx, OFFSET option2
 0000071F  E8 00000000 E	    call WriteString
				    
 00000724  B2 07		    mov dl, 7
 00000726  B6 13		    mov dh, 19
 00000728  E8 00000000 E	    call Gotoxy
 0000072D  BA 00000593 R	    mov edx, OFFSET option3
 00000732  E8 00000000 E	    call WriteString
				    
 00000737  61			    popad
 00000738  C3			    ret
 00000739			ResetOptionColors ENDP

 00000739			UpdatePlayer PROC
 00000739  8A 15 000005C4 R	    mov dl, playerX
 0000073F  8A 35 000005C5 R	    mov dh, playerY
 00000745  E8 00000000 E	    call Gotoxy
 0000074A  B8 0000000F		    mov eax, white + (black * 16)
 0000074F  E8 00000000 E	    call SetTextColor
 00000754  B0 20		    mov al, " "
 00000756  E8 00000000 E	    call WriteChar
 0000075B  C3			    ret
 0000075C			UpdatePlayer ENDP

 0000075C			DrawPlayer PROC
 0000075C  8A 15 000005C4 R	    mov dl, playerX
 00000762  8A 35 000005C5 R	    mov dh, playerY
 00000768  E8 00000000 E	    call Gotoxy
 0000076D  B0 58		    mov al, "X"
 0000076F  E8 00000000 E	    call WriteChar
 00000774  C3			    ret
 00000775			DrawPlayer ENDP

 00000775			DrawGameOver PROC
 00000775  E8 00000000 E	    call ClrScr
 0000077A  B2 19		    mov dl, 25
 0000077C  B6 0A		    mov dh, 10
 0000077E  E8 00000000 E	    call Gotoxy
				    
 00000783  80 3D 000005C9 R	    cmp playerHealth, 0
	   00
 0000078A  7E 07		    jle DisplayLoss
				    
 0000078C  BA 00000466 R	    mov edx, OFFSET victoryText
 00000791  EB 05		    jmp ContinueGameOver
				    
 00000793			DisplayLoss:
 00000793  BA 0000045B R	    mov edx, OFFSET gameOverText
				    
 00000798			ContinueGameOver:
 00000798  E8 00000000 E	    call WriteString
 0000079D  B2 0F		    mov dl, 15
 0000079F  B6 0F		    mov dh, 15
 000007A1  E8 00000000 E	    call Gotoxy
 000007A6  BA 0000046F R	    mov edx, OFFSET playAgainText
 000007AB  E8 00000000 E	    call WriteString
 000007B0  C3			    ret
 000007B1			DrawGameOver ENDP

 000007B1			InsideLogo PROC
 000007B1  B2 05		    mov dl, 5
 000007B3  B6 02		    mov dh, 2
 000007B5  E8 00000000 E	    call Gotoxy
 000007BA  BA 00000042 R	    mov edx, OFFSET logoArt1
 000007BF  E8 00000000 E	    call WriteString

 000007C4  B2 05		    mov dl, 5
 000007C6  B6 03		    mov dh, 3
 000007C8  E8 00000000 E	    call Gotoxy
 000007CD  BA 0000004E R	    mov edx, OFFSET logoArt2
 000007D2  E8 00000000 E	    call WriteString
				    
 000007D7  B2 05		    mov dl, 5
 000007D9  B6 04		    mov dh, 4
 000007DB  E8 00000000 E	    call Gotoxy
 000007E0  BA 0000005A R	    mov edx, OFFSET logoArt3
 000007E5  E8 00000000 E	    call WriteString

 000007EA  B2 05		    mov dl, 5
 000007EC  B6 05		    mov dh, 5
 000007EE  E8 00000000 E	    call Gotoxy
 000007F3  BA 00000066 R	    mov edx, OFFSET logoArt4
 000007F8  E8 00000000 E	    call WriteString
				    
 000007FD  C3			    ret
 000007FE			InsideLogo ENDP

				END main
Microsoft (R) Macro Assembler Version 14.41.34123.0	    11/20/24 21:18:22
RayaneELYASTIL2Q2 - Copy.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000688 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007FE DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGameOver . . . . . . . . . .	P Near	 00000775 _TEXT	Length= 0000003C Public STDCALL
  DisplayLoss  . . . . . . . . .	L Near	 00000793 _TEXT	
  ContinueGameOver . . . . . . .	L Near	 00000798 _TEXT	
DrawMenu . . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 000000AC Public STDCALL
DrawPlayer . . . . . . . . . . .	P Near	 0000075C _TEXT	Length= 00000019 Public STDCALL
DrawUI . . . . . . . . . . . . .	P Near	 00000278 _TEXT	Length= 000000B6 Public STDCALL
  DrawSides  . . . . . . . . . .	L Near	 000002AA _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnemyTurn  . . . . . . . . . . .	P Near	 000005DE _TEXT	Length= 0000009F Public STDCALL
  StorePlayerDamage  . . . . . .	L Near	 00000619 _TEXT	
  EnemyBlocked . . . . . . . . .	L Near	 0000064A _TEXT	
  EnemyMiss  . . . . . . . . . .	L Near	 0000065F _TEXT	
  EnemyTurnEnd . . . . . . . . .	L Near	 00000672 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameLoop . . . . . . . . . . . .	P Near	 0000032E _TEXT	Length= 000002B0 Public STDCALL
  GameLoopStart  . . . . . . . .	L Near	 00000338 _TEXT	
  ReturnToMenu . . . . . . . . .	L Near	 00000396 _TEXT	
  GameOverState  . . . . . . . .	L Near	 000003A3 _TEXT	
  MovePlayerUp . . . . . . . . .	L Near	 000003AB _TEXT	
  MovePlayerDown . . . . . . . .	L Near	 000003D0 _TEXT	
  WrapToBottom . . . . . . . . .	L Near	 000003F5 _TEXT	
  WrapToTop  . . . . . . . . . .	L Near	 0000040D _TEXT	
  SelectGameOption . . . . . . .	L Near	 00000425 _TEXT	
  ExecuteAttack  . . . . . . . .	L Near	 00000454 _TEXT	
  StoreEnemyDamage . . . . . . .	L Near	 0000048D _TEXT	
  ExecuteGuard . . . . . . . . .	L Near	 000004D5 _TEXT	
  ExecuteHeal  . . . . . . . . .	L Near	 00000527 _TEXT	
  StorePlayerHealth  . . . . . .	L Near	 0000056E _TEXT	
  HealFailed . . . . . . . . . .	L Near	 000005BA _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InsideLogo . . . . . . . . . . .	P Near	 000007B1 _TEXT	Length= 0000004D Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySoundA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetOptionColors  . . . . . . .	P Near	 000006F3 _TEXT	Length= 00000046 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowInstructions . . . . . . . .	P Near	 000001D8 _TEXT	Length= 000000A0 Public STDCALL
  InstructionWaitLoop  . . . . .	L Near	 00000262 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ToggleMusicMute  . . . . . . . .	P Near	 000000FE _TEXT	Length= 0000002E Public STDCALL
  MuteBackgroundMusic  . . . . .	L Near	 00000120 _TEXT	
UpdateHealthDisplay  . . . . . .	P Near	 0000067D _TEXT	Length= 00000076 Public STDCALL
UpdatePlayer . . . . . . . . . .	P Near	 00000739 _TEXT	Length= 00000023 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000FE Public STDCALL
  mainGameLoop . . . . . . . . .	L Near	 00000016 _TEXT	
  showMuted  . . . . . . . . . .	L Near	 00000042 _TEXT	
  displayMuteStatus  . . . . . .	L Near	 00000047 _TEXT	
  ProcessMenuState . . . . . . .	L Near	 00000063 _TEXT	
  EnterInstructionsState . . . .	L Near	 0000007B _TEXT	
  InitializeNewGame  . . . . . .	L Near	 00000089 _TEXT	
  ProcessGameState . . . . . . .	L Near	 000000AF _TEXT	
  ProcessInstructionsState . . .	L Near	 000000B9 _TEXT	
  ProcessGameOverState . . . . .	L Near	 000000C3 _TEXT	
  ExitGameProcedure  . . . . . .	L Near	 000000DA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000611 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000625 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000062E _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000642 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000064E _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000653 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000066C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0000067F _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_HEALTH . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_BOTTOM  . . . . . . . . . .	Number	 00000017h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MENU_LEFT  . . . . . . . . . . .	Number	 0000000Eh   
MENU_RIGHT . . . . . . . . . . .	Number	 00000041h   
MENU_TOP . . . . . . . . . . . .	Number	 00000004h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ASYNC  . . . . . . . . . . .	Number	 00000001h   
SND_FILENAME . . . . . . . . . .	Number	 00020000h   
SND_LOOP . . . . . . . . . . . .	Number	 00000008h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
actionTaken  . . . . . . . . . .	Byte	 00000610 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blockMessage . . . . . . . . . .	Byte	 000005F0 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
borderChar . . . . . . . . . . .	Byte	 000001F0 _DATA	
borderDirection  . . . . . . . .	Byte	 000001EF _DATA	
borderTrailLength  . . . . . . .	Byte	 00000382 _DATA	
borderX  . . . . . . . . . . . .	Byte	 000001ED _DATA	
borderY  . . . . . . . . . . . .	Byte	 000001EE _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
combatOptions  . . . . . . . . .	Byte	 00000586 _DATA	
controlsText . . . . . . . . . .	Byte	 00000598 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enemyDamage  . . . . . . . . . .	Byte	 000005CF _DATA	
enemyHealth  . . . . . . . . . .	Byte	 000005CE _DATA	
enemyIsAttacking . . . . . . . .	Byte	 000005D0 _DATA	
enemyStatusText  . . . . . . . .	Byte	 000005E1 _DATA	
exitText . . . . . . . . . . . .	Byte	 00000498 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameGround . . . . . . . . . . .	Byte	 00000565 _DATA	
gameOverText . . . . . . . . . .	Byte	 0000045B _DATA	
gameState  . . . . . . . . . . .	Byte	 000005C8 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
ground . . . . . . . . . . . . .	Byte	 0000052F _DATA	
healAmount . . . . . . . . . . .	Byte	 000005CD _DATA	
healChargesText  . . . . . . . .	Byte	 00000601 _DATA	
healthStatusText . . . . . . . .	Byte	 000005D1 _DATA	
inputChar  . . . . . . . . . . .	Byte	 000005C7 _DATA	
instruction1 . . . . . . . . . .	Byte	 00000391 _DATA	
instruction2 . . . . . . . . . .	Byte	 000003B3 _DATA	
instruction3 . . . . . . . . . .	Byte	 000003D1 _DATA	
instruction4 . . . . . . . . . .	Byte	 000003F6 _DATA	
instruction5 . . . . . . . . . .	Byte	 00000418 _DATA	
instruction6 . . . . . . . . . .	Byte	 0000043D _DATA	
instructionTexts . . . . . . . .	Byte	 00000391 _DATA	
instructionsTitle  . . . . . . .	Byte	 00000384 _DATA	
isMuted  . . . . . . . . . . . .	Byte	 0000000D _DATA	
lastBorderPos  . . . . . . . . .	DWord	 000001F2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 0000060E _DATA	
logoArt1 . . . . . . . . . . . .	Byte	 00000042 _DATA	
logoArt2 . . . . . . . . . . . .	Byte	 0000004E _DATA	
logoArt3 . . . . . . . . . . . .	Byte	 0000005A _DATA	
logoArt4 . . . . . . . . . . . .	Byte	 00000066 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuOption1  . . . . . . . . . .	Byte	 00000194 _DATA	
menuOption2  . . . . . . . . . .	Byte	 000001A2 _DATA	
menuOption3  . . . . . . . . . .	Byte	 000001B2 _DATA	
menuOptions  . . . . . . . . . .	Byte	 00000194 _DATA	
missMessage  . . . . . . . . . .	Byte	 000005F9 _DATA	
muteMessage  . . . . . . . . . .	Byte	 0000000E _DATA	
mutedStatus  . . . . . . . . . .	Byte	 00000026 _DATA	
option1  . . . . . . . . . . . .	Byte	 00000586 _DATA	
option2  . . . . . . . . . . . .	Byte	 0000058D _DATA	
option3  . . . . . . . . . . . .	Byte	 00000593 _DATA	
playAgainText  . . . . . . . . .	Byte	 0000046F _DATA	
playerCanHeal  . . . . . . . . .	Byte	 000005CC _DATA	
playerDamage . . . . . . . . . .	Byte	 000005CA _DATA	
playerHealth . . . . . . . . . .	Byte	 000005C9 _DATA	
playerIsBlocking . . . . . . . .	Byte	 000005CB _DATA	
playerX  . . . . . . . . . . . .	Byte	 000005C4 _DATA	
playerY  . . . . . . . . . . . .	Byte	 000005C5 _DATA	
pressKeyPrompt . . . . . . . . .	Byte	 000001BA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selectedOption . . . . . . . . .	Byte	 0000060F _DATA	
sideY  . . . . . . . . . . . . .	Byte	 000005C6 _DATA	
sides  . . . . . . . . . . . . .	Byte	 000004F9 _DATA	
soundFile  . . . . . . . . . . .	Byte	 00000000 _DATA	
titleArt1  . . . . . . . . . . .	Byte	 00000072 _DATA	
titleArt2  . . . . . . . . . . .	Byte	 000000AC _DATA	
titleArt3  . . . . . . . . . . .	Byte	 000000E6 _DATA	
titleArt4  . . . . . . . . . . .	Byte	 00000120 _DATA	
titleArt5  . . . . . . . . . . .	Byte	 0000015A _DATA	
top  . . . . . . . . . . . . . .	Byte	 000004C3 _DATA	
trailIndex . . . . . . . . . . .	Byte	 00000383 _DATA	
unmutedStatus  . . . . . . . . .	Byte	 00000033 _DATA	
victoryText  . . . . . . . . . .	Byte	 00000466 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
